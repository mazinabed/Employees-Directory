{"ast":null,"code":"var _jsxFileName = \"/Users/mazinabed/Desktop/Employee-Directory/src/components/AppContext.js\";\nimport React, { useState, createContext, useEffect } from 'react';\nexport const AppContext = createContext();\nexport const AppProvider = props => {\n  //Initially data called from API\n  const [employees, setEmployees] = useState({}); //State check to see if it's done being called\n\n  const [fetching, setFetching] = useState(false); // Set search data\n\n  const [searching, setSearching] = useState(\"\"); // Set alphabetical sort data\n\n  const [sorting, setSorting] = useState(\"alpha\"); // Set image src img\n\n  const [sortImg, setSortImg] = useState(\"/img/arrow-up.svg\");\n\n  const fetchEmployeeData = async () => {\n    let response = await fetch('https://randomuser.me/api/?results=200&nat=us');\n    let data = await response.json();\n    setEmployees(data.results);\n    setFetching(fetching === false ? true : false);\n  };\n\n  useEffect(() => {\n    fetchEmployeeData();\n  }, []);\n  return React.createElement(AppContext.Provider, {\n    value: {\n      employeeData: [employees, setEmployees],\n      fetch: [fetching, setFetching],\n      search: [searching, setSearching],\n      sort: [sorting, setSorting],\n      sortImgSrc: [sortImg, setSortImg]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/mazinabed/Desktop/Employee-Directory/src/components/AppContext.js"],"names":["React","useState","createContext","useEffect","AppContext","AppProvider","props","employees","setEmployees","fetching","setFetching","searching","setSearching","sorting","setSorting","sortImg","setSortImg","fetchEmployeeData","response","fetch","data","json","results","employeeData","search","sort","sortImgSrc","children"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,aAAzB,EAAwCC,SAAxC,QAAwD,OAAxD;AAEA,OAAO,MAAMC,UAAU,GAAGF,aAAa,EAAhC;AAEP,OAAO,MAAMG,WAAW,GAAGC,KAAK,IAAI;AAEpC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C,CAHoC,CAIpC;;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC,CALoC,CAMpC;;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C,CAPoC,CAQpC;;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,OAAD,CAAtC,CAToC,CAUpC;;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,mBAAD,CAAtC;;AAEA,QAAMgB,iBAAiB,GAAG,YAAY;AACpC,QAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAAD,CAA1B;AACA,QAAIC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAjB;AACAb,IAAAA,YAAY,CAACY,IAAI,CAACE,OAAN,CAAZ;AACAZ,IAAAA,WAAW,CAAED,QAAQ,KAAK,KAAb,GAAqB,IAArB,GAA2B,KAA7B,CAAX;AACD,GALD;;AAOAN,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,iBAAiB;AAClB,GAFQ,EAEP,EAFO,CAAT;AAME,SACE,oBAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAC1BM,MAAAA,YAAY,EAAE,CAAChB,SAAD,EAAYC,YAAZ,CADY;AAE1BW,MAAAA,KAAK,EAAE,CAACV,QAAD,EAAWC,WAAX,CAFmB;AAG1Bc,MAAAA,MAAM,EAAE,CAACb,SAAD,EAAYC,YAAZ,CAHkB;AAI1Ba,MAAAA,IAAI,EAAE,CAACZ,OAAD,EAAUC,UAAV,CAJoB;AAK1BY,MAAAA,UAAU,EAAE,CAACX,OAAD,EAAUC,UAAV;AALc,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGV,KAAK,CAACqB,QAPT,CADF;AAWD,CArCM","sourcesContent":["import React, {useState, createContext, useEffect} from 'react';\n\nexport const AppContext = createContext();\n\nexport const AppProvider = props => {\n\n//Initially data called from API\nconst [employees, setEmployees] = useState({}); \n//State check to see if it's done being called\nconst [fetching, setFetching] = useState(false); \n// Set search data\nconst [searching, setSearching] = useState(\"\"); \n// Set alphabetical sort data\nconst [sorting, setSorting] = useState(\"alpha\");\n// Set image src img\nconst [sortImg, setSortImg] = useState(\"/img/arrow-up.svg\"); \n\nconst fetchEmployeeData = async () => {\n  let response = await fetch('https://randomuser.me/api/?results=200&nat=us');\n  let data = await response.json();\n  setEmployees(data.results);\n  setFetching( fetching === false ? true: false);\n}\n\nuseEffect(() => {\n  fetchEmployeeData();\n},[]);\n\n\n\n  return(\n    <AppContext.Provider value={{ \n      employeeData: [employees, setEmployees], \n      fetch: [fetching, setFetching], \n      search: [searching, setSearching], \n      sort: [sorting, setSorting],\n      sortImgSrc: [sortImg, setSortImg]\n      }}>\n      {props.children}\n    </AppContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}